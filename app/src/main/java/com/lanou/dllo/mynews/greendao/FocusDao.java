package com.lanou.dllo.mynews.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lanou.dllo.mynews.greendao.Focus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOCUS".
*/
public class FocusDao extends AbstractDao<Focus, Long> {

    public static final String TABLENAME = "FOCUS";

    /**
     * Properties of entity Focus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Alias = new Property(3, String.class, "alias", false, "ALIAS");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Classification = new Property(5, String.class, "classification", false, "CLASSIFICATION");
        public final static Property Picurl = new Property(6, String.class, "picurl", false, "PICURL");
        public final static Property Headpicurl = new Property(7, String.class, "headpicurl", false, "HEADPICURL");
        public final static Property ExpertId = new Property(8, String.class, "expertId", false, "EXPERT_ID");
    };


    public FocusDao(DaoConfig config) {
        super(config);
    }
    
    public FocusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOCUS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: content
                "\"TITLE\" TEXT," + // 2: title
                "\"ALIAS\" TEXT," + // 3: alias
                "\"NAME\" TEXT," + // 4: name
                "\"CLASSIFICATION\" TEXT," + // 5: classification
                "\"PICURL\" TEXT," + // 6: picurl
                "\"HEADPICURL\" TEXT," + // 7: headpicurl
                "\"EXPERT_ID\" TEXT);"); // 8: expertId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOCUS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Focus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String classification = entity.getClassification();
        if (classification != null) {
            stmt.bindString(6, classification);
        }
 
        String picurl = entity.getPicurl();
        if (picurl != null) {
            stmt.bindString(7, picurl);
        }
 
        String headpicurl = entity.getHeadpicurl();
        if (headpicurl != null) {
            stmt.bindString(8, headpicurl);
        }
 
        String expertId = entity.getExpertId();
        if (expertId != null) {
            stmt.bindString(9, expertId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Focus readEntity(Cursor cursor, int offset) {
        Focus entity = new Focus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alias
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // classification
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // picurl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // headpicurl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // expertId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Focus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClassification(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPicurl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHeadpicurl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExpertId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Focus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Focus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
